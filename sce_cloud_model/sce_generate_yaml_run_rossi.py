import sce_settings
import math
import re

# Generate number of customers in each category
category_count_dct = {'Tenure:HOMEOWNERSRateSchedule:NONCAREConsumption:Bin1': 194504, 'Tenure:HOMEOWNERSRateSchedule:NONCAREConsumption:Bin2': 497789, 'Tenure:HOMEOWNERSRateSchedule:NONCAREConsumption:Bin3': 572780, 'Tenure:HOMEOWNERSRateSchedule:NONCAREConsumption:Bin4': 431410, 'Tenure:HOMEOWNERSRateSchedule:NONCAREConsumption:Bin5': 266229, 'Tenure:HOMEOWNERSRateSchedule:NONCAREConsumption:Bin6': 307382, 'Tenure:HOMEOWNERSRateSchedule:CAREConsumption:Bin4': 159003, 'Tenure:HOMEOWNERSRateSchedule:CAREConsumption:Bin5': 89890, 'Tenure:HOMEOWNERSRateSchedule:CAREConsumption:Bin6': 86202, 'Tenure:HOMEOWNERSRateSchedule:CAREConsumption:Bin1': 46515, 'Tenure:HOMEOWNERSRateSchedule:CAREConsumption:Bin2': 198215, 'Tenure:HOMEOWNERSRateSchedule:CAREConsumption:Bin3': 228942, 'Tenure:RENTERSRateSchedule:CAREConsumption:Bin1': 86540, 'Tenure:RENTERSRateSchedule:CAREConsumption:Bin3': 114354, 'Tenure:RENTERSRateSchedule:CAREConsumption:Bin2': 200566, 'Tenure:RENTERSRateSchedule:CAREConsumption:Bin5': 20924, 'Tenure:RENTERSRateSchedule:CAREConsumption:Bin4': 50262, 'Tenure:RENTERSRateSchedule:CAREConsumption:Bin6': 13756, 'Tenure:RENTERSRateSchedule:NONCAREConsumption:Bin6': 14800, 'Tenure:RENTERSRateSchedule:NONCAREConsumption:Bin5': 19499, 'Tenure:RENTERSRateSchedule:NONCAREConsumption:Bin4': 47204, 'Tenure:RENTERSRateSchedule:NONCAREConsumption:Bin3': 108252, 'Tenure:RENTERSRateSchedule:NONCAREConsumption:Bin2': 210049, 'Tenure:RENTERSRateSchedule:NONCAREConsumption:Bin1': 151708}

# Generate PV Prices for 20 years    
pv_prices_lst = [7.13 * 0.7 * 1000] * 12
for i in range(1, 20):
    if i <= 3:
        temp_lst = [7.13 * 0.7 * math.pow(0.95, i) * 1000] * 12 
    else:
        temp_lst = [7.13 * math.pow(0.95, i) * 1000] * 12 
    pv_prices_lst.extend(temp_lst)
pv_prices_lst.append(temp_lst[0])

def generate_sce_data_yaml():
    f = open('Rossi_Run.yaml','wb')
    f.write('# Customer Categories are a cross product of [Care, Noncare] X [Consumption Bin] X [Renters, Homeowners]\n')
    f.write('\n')
    
    # define technology installer
    f.write('- technology_installer_dictionary :\n')
    f.write('    installer_1 :\n')
    f.write('        specs :\n')
    f.write('            type : PvInstaller\n')
    f.write('            name : Pv Installer\n')
    f.write('            parameter_dictionary:\n')
    f.write('                kw_per_panel : 1\n')
    f.write('                minimum_number_of_panels : 1\n')
    f.write('                maximum_number_of_panels : 10\n')
    f.write('                conversion_factor : 1\n')
    f.write('                efficiency : \n')
    f.write('                    list_of_values : ' + create_string_from_list([(1 - (0.0/12)*x) for x in range(0,240)]) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    f.write('                cost_per_kw :\n')
    f.write('                    list_of_values : ' + create_string_from_list(pv_prices_lst) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    f.write('                term_in_months : 240\n')
    f.write('                annual_interest_rate : 5\n')
    f.write('\n')

    # define technology dictionary
    f.write('- technology_dictionary :\n')
    f.write('    technology_1 :\n')
    f.write('        specs :\n')
    f.write('            type : PvTechnology\n')
    f.write('            name : PV\n')
    f.write('            parameter_dictionary :\n')
    f.write('                conversion_factor : 1\n')
    f.write('                quantity_min : 1\n')
    f.write('                quantity_max : 10\n')
    f.write('\n')
    
    # define consumption profiles
    f.write('- consumption_profile_dictionary :\n')
    f.write('    consumption_profile_1: \n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Consumption Profile 1\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*1.3*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([99.4550, 88.7206, 90.9491, 84.5422, 86.4829, 92.1024, 123.9677, 128.1275, 109.5865, 95.7523, 91.3362, 108.9776],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    
    f.write('    consumption_profile_2: \n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Consumption Profile 2\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*3.0*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([99.4550, 88.7206, 90.9491, 84.5422, 86.4829, 92.1024, 123.9677, 128.1275, 109.5865, 95.7523, 91.3362, 108.9776],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    
    f.write('    consumption_profile_3: \n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Consumption Profile 3\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*5.0*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([99.4550, 88.7206, 90.9491, 84.5422, 86.4829, 92.1024, 123.9677, 128.1275, 109.5865, 95.7523, 91.3362, 108.9776],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    
    f.write('    consumption_profile_4: \n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Consumption Profile 4\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*6.9*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([99.4550, 88.7206, 90.9491, 84.5422, 86.4829, 92.1024, 123.9677, 128.1275, 109.5865, 95.7523, 91.3362, 108.9776],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    
    f.write('    consumption_profile_5: \n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Consumption Profile 5\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*8.9*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([99.4550, 88.7206, 90.9491, 84.5422, 86.4829, 92.1024, 123.9677, 128.1275, 109.5865, 95.7523, 91.3362, 108.9776],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    f.write('\n')
    
    f.write('    consumption_profile_6: \n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Consumption Profile 6\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*13.0*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([99.4550, 88.7206, 90.9491, 84.5422, 86.4829, 92.1024, 123.9677, 128.1275, 109.5865, 95.7523, 91.3362, 108.9776],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    f.write('\n')
        
    # define solar intensity profiles - climate zone 6
    f.write('- solar_intensity_profile_dictionary :\n')
    f.write('    solar_intensity_profile_1 :\n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Solar Intensity Profile 1\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x * sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([69.9565, 79.2319, 122.4210, 146.9754, 163.7903, 177.4794, 187.9472, 172.8724, 135.2222, 107.3685, 80.8907, 69.8445],sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    f.write('    solar_intensity_profile_2 :\n')
    f.write('        specs : \n')
    f.write('            type : Trace\n')
    f.write('            name : Solar Intensity Profile 2\n')
    f.write('            parameter_dictionary :\n')
    f.write('                trace :\n')
    f.write('                    list_of_values : ' + create_string_from_list([x*sce_settings.NUMBER_OF_SECONDS_IN_ONE_YEAR/y for (x,y) in zip([0] * 12,sce_settings.NUMBER_OF_SECONDS_IN_EACH_MONTH)] * 30) + '\n')
    f.write('                    index_of_begin_tick : 0\n')
    f.write('\n')
    
    # define baseline regions
    f.write('- baseline_region_dictionary :\n')
    f.write('    baseline_region_1 :\n')
    f.write('        specs :\n')
    f.write('            type : BaselineRegion\n')
    f.write('            name : Zone 1\n')
    f.write('            summer_baseline_in_kwh_per_year : ' + str(12.2*sce_settings.NUMBER_OF_DAYS_IN_ONE_YEAR) + '\n')
    f.write('            winter_baseline_in_kwh_per_year : ' + str(10.1*sce_settings.NUMBER_OF_DAYS_IN_ONE_YEAR) + '\n')
    f.write('\n')
    
    # define rate schedules
    f.write('- rate_schedule_dictionary :\n')
    f.write('    rate_schedule_1 :\n')
    f.write('        specs :\n')
    f.write('            type : TierNetMeterRateSchedule\n')
    f.write('            name : Schedule D\n')
    f.write('            rate_component_dictionary :\n')
    f.write('                customer_charge_demand_differentiated_flag : 0\n')
    f.write('                demand_differentiated_break_point : 0\n')
    f.write('                customer_charge_above_break_point : 0\n')
    f.write('                customer_charge : 0\n')
    f.write('                number_of_tiers : 4\n')
    f.write('                T2_usage_baseline : 1\n')
    f.write('                T3_usage_baseline : 1.3\n')
    f.write('                T4_usage_baseline : 2\n')
    f.write('                T5_usage_baseline : 2\n')
    f.write('                T1_rate : 0.13\n')
    f.write('                T2_rate : 0.16\n')
    f.write('                T3_rate : 0.27\n')
    f.write('                T4_rate : 0.31\n')
    f.write('                T5_rate : 0.31\n')    
    f.write('                net_surplus_compensation_rate : 0.035\n')
    f.write('            rate_update_rules_dictionary :\n')
    f.write('                CARE_flag : 0\n')
    f.write('                ratio_flag : 0\n')
    f.write('                T1_increase : 1.01\n')
    f.write('                T2_increase : 1.01\n')
    f.write('                T4_T3_delta : 0.04\n')
    f.write('                T5_T4_delta : 0\n')
    f.write('                T2_T1_ratio : 0\n')
    f.write('                T3_T1_ratio : 0\n')
    f.write('                T4_T1_ratio : 0\n')
    f.write('                T5_T1_ratio : 0\n')
    f.write('                T1_CARE_discount : 0.8\n')
    f.write('                T2_CARE_discount : 0.8\n')
    f.write('                T3_CARE_discount : 0.8\n')
    f.write('                T4_CARE_discount : 0.8\n')
    f.write('                T5_CARE_discount : 0.8\n')
    f.write('                fixed_charge_CARE_discount : 0\n')
    f.write('\n')
    
    f.write('- rate_schedule_dictionary :\n')
    f.write('    rate_schedule_2 :\n')
    f.write('        specs :\n')
    f.write('            type : TierNetMeterRateSchedule\n')
    f.write('            name : Schedule D CARE\n')
    f.write('            rate_component_dictionary :\n')
    f.write('                customer_charge_demand_differentiated_flag : 0\n')
    f.write('                demand_differentiated_break_point : 0\n')
    f.write('                customer_charge_above_break_point : 0\n')
    f.write('                customer_charge : 0\n')
    f.write('                number_of_tiers : 4\n')
    f.write('                T2_usage_baseline : 1\n')
    f.write('                T3_usage_baseline : 1.3\n')
    f.write('                T4_usage_baseline : 2\n')
    f.write('                T5_usage_baseline : 2\n')
    f.write('                T1_rate : 0.10\n')
    f.write('                T2_rate : 0.13\n')
    f.write('                T3_rate : 0.22\n')
    f.write('                T4_rate : 0.22\n')
    f.write('                T5_rate : 0.22\n')    
    f.write('                net_surplus_compensation_rate : 0.035\n')
    f.write('            rate_update_rules_dictionary :\n')
    f.write('                CARE_flag : 1\n')
    f.write('                ratio_flag : 0\n')
    f.write('                T1_increase : 1.01\n')
    f.write('                T2_increase : 1.01\n')
    f.write('                T4_T3_delta : 0.04\n')
    f.write('                T5_T4_delta : 0\n')
    f.write('                T2_T1_ratio : 0\n')
    f.write('                T3_T1_ratio : 0\n')
    f.write('                T4_T1_ratio : 0\n')
    f.write('                T5_T1_ratio : 0\n')
    f.write('                T1_CARE_discount : 0.8\n')
    f.write('                T2_CARE_discount : 0.8\n')
    f.write('                T3_CARE_discount : 0.8\n')
    f.write('                T4_CARE_discount : 0.8\n')
    f.write('                T5_CARE_discount : 0.8\n')
    f.write('                fixed_charge_CARE_discount : 0\n')
    f.write('\n')
    
    # define utility
    f.write('- utility_dictionary :\n')
    f.write('    utility_1 :\n')
    f.write('        specs :\n')
    f.write('            type : Utility\n')
    f.write('            name : utility\n')
    f.write('            parameter_dictionary :\n')
    f.write('                baseline_as_percentage_of_aggregate_usage : 0.55\n')
    f.write('                delivery_revenue_requirement_per_year : ' + str(2.74340048593 * (10**9)) + '\n')
    f.write('                generation_revenue_requirement_per_kwh : 0.08205\n')
    f.write('\n')

    f.write('- residential_customer_category_dictionary :\n')
    household_number = 1
    for consumption_category, customer_count in category_count_dct.iteritems(): 
        household_tenure = get_middle_text(consumption_category, 'Tenure:', 'RateSchedule:')
        consumption_bin = int(float(get_middle_text(consumption_category, 'Consumption:Bin', '<')))
        rate = get_middle_text(consumption_category, 'RateSchedule:', 'Consumption:')
        rate_schedule_str = 'Schedule D'
        if re.search('NONCARE', rate) == None:
            rate_schedule_str = 'Schedule D CARE'
               
        if household_tenure == 'HOMEOWNERS':
            f.write('    residential_customer_category_' + consumption_category + ':\n')
            f.write('        specs :\n')
            f.write('            type : ResidentialCustomerCategory\n')
            f.write('            parameter_dictionary :\n')
            f.write('                customer_category_name : Customer_Category_' + consumption_category + '\n')
            f.write('                number_of_customers : ' + str(customer_count) + '\n')
            f.write('                consumption_profile : Consumption Profile ' + str(consumption_bin) + '\n')
            f.write('                solar_intensity_profile : Solar Intensity Profile 1\n')
            f.write('                name_of_rate_schedule : ' + rate_schedule_str + '\n')
            f.write('                pv_installer : Pv Installer\n')
            f.write('                model_type : Classic_Bass_Model_With_Savings\n')
            f.write('                adoption_parameter_pClassic: 0.0\n') 
            f.write('                adoption_parameter_qClassic: 0.0\n')
            f.write('                adoption_parameter_bClassic: 0.0\n')  
            f.write('                adoption_parameter_p_bin_1: 0.0\n') 
            f.write('                adoption_parameter_q_bin_1: 0.0\n')
            f.write('                adoption_parameter_p_bin_2: 0.00005\n') 
            f.write('                adoption_parameter_q_bin_2: 0.0807\n') 
            f.write('                adoption_parameter_p_bin_3: 0.00004\n') 
            f.write('                adoption_parameter_q_bin_3: 0.2127 \n')   
            f.write('                name_of_baseline_region : Zone 1\n')
        else:
            f.write('    residential_customer_category_' + consumption_category + ':\n')
            f.write('        specs :\n')
            f.write('            type : ResidentialCustomerCategory\n')
            f.write('            parameter_dictionary :\n')
            f.write('                customer_category_name : Customer_Category_' + consumption_category + '\n')
            f.write('                number_of_customers : ' + str(customer_count) + '\n')
            f.write('                consumption_profile : Consumption Profile ' + str(consumption_bin) + '\n')
            f.write('                solar_intensity_profile : Solar Intensity Profile 2\n')
            f.write('                name_of_rate_schedule : ' + rate_schedule_str + '\n')
            f.write('                pv_installer : Pv Installer\n')
            f.write('                model_type : Classic_Bass_Model_With_Savings\n')
            f.write('                adoption_parameter_pClassic: 0.0\n') 
            f.write('                adoption_parameter_qClassic: 0.0\n')
            f.write('                adoption_parameter_bClassic: 0.0\n')  
            f.write('                adoption_parameter_p_bin_1: 0.0\n') 
            f.write('                adoption_parameter_q_bin_1: 0.0\n')
            f.write('                adoption_parameter_p_bin_2: 0.0001114\n') 
            f.write('                adoption_parameter_q_bin_2: 0.06566\n') 
            f.write('                adoption_parameter_p_bin_3: 0.0001517\n') 
            f.write('                adoption_parameter_q_bin_3: 0.1314 \n')  
            f.write('                name_of_baseline_region : Zone 1\n')             
    f.write('\n')
    
    f.close()
    
def create_string_from_list(list_of_values):
    s = '[' + ', '.join(str(l) for l in list_of_values) + ']'
    return s
    
def get_middle_text(line, string_start, string_end):
    temp = line.split(string_start)[1]
    return temp.split(string_end)[0]

if __name__ == '__main__':
    generate_sce_data_yaml()
    